/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package lab8;

import java.io.*;
import java.util.*;
import org.junit.Test;
import static org.junit.Assert.*;

public class Lab8Test {
    @Test public void test01_integerToInteger() {
        Lab8 L = new Lab8();
        HashMap<Integer, Integer> h = L.integerToInteger();
        assertTrue(h.get(0) == 5);
    }
    @Test public void test02_integerToDouble() {
        Lab8 L = new Lab8();
        HashMap<Double, Double> h = L.doubleToDouble();
        assertTrue(h.get(-1.5) == 5.5);
    }
    
    @Test public void test03_stringToString() {
        Lab8 L = new Lab8();
        HashMap<String, String> h = L.stringToString();
        assertEquals(h.get("Central Processing Unit"), "CPU");
        assertEquals(h.get("Random Access Memory"), "RAM");
    }
    @Test public void test04_characterToString() {
        Lab8 L = new Lab8();
        HashMap<Character, String> h = L.characterToString();
        assertEquals(h.get('a'), "A");
        assertEquals(h.get('b'), "B");
        assertEquals(h.get('c'), "C");
    }
    @Test public void test05_integerToString() {
        Lab8 L = new Lab8();
        HashMap<Integer, String> h = L.integerToString();
        assertEquals(h.get(0), "January");
        assertEquals(h.get(5), "May");
        assertEquals(h.get(9), "September");
    }
    @Test public void test06_stringToLinkedList() {
        Lab8 L = new Lab8();
        HashMap<String, LinkedList<Integer>> h = L.integerToLinkedList();
        for(int i = 0; i < 10; i++){
            assertTrue(i == h.get("bucket"+i).remove());
        }
    }
    @Test public void test07_stringToHashMapOfStringToString() {
        Lab8 L = new Lab8();
        HashMap<String, HashMap<String, String>> h = L.stringToHashMapOfStringToString();
        HashMap<String, String> staff = h.get("PeaceHealth Medical Group");
        assertTrue(staff != null);
        assertEquals(staff.get("Cynthia L. Brinn"), "Dietitian");
        assertEquals(staff.get("Peter E. Filuk"), "Pediatrics");
        assertEquals(staff.get("James R. Beieler"), "Family Medicine");
        assertEquals(staff.get("Sarah M. Langan"), "Gastroenterology");
        assertEquals(staff.get("Megan A. Britson"), "Internal Medicine");
    }
    @Test public void test08_paintBucket(){
        Lab8 L = new Lab8();
        int i, j;
        char[][] inputPicture = {
                                    {' ', ' ', ' ', ' ', ' ', ' ', '#', '#', '#', ' ', ' ', ' ', ' ', ' ', ' '},
                                    {' ', ' ', ' ', ' ', '#', '#', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                                    {' ', ' ', ' ', '#', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                                    {' ', '#', '#', ' ', ' ', '#', '#', ' ', ' ', ' ', ' ', ' ', '#', '#', '#'},
                                    {'#', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', '#', ' '},
                                    {'#', ' ', '#', ' ', '#', ' ', ' ', ' ', '#', ' ', '#', ' ', '#', ' ', ' '},
                                    {'#', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' '},
                                    {'#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', '#', ' ', '#', ' ', ' '},
                                    {' ', '#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', '#', ' '},
                                    {' ', ' ', '#', '#', '#', '#', '#', ' ', ' ', ' ', ' ', ' ', '#', '#', '#'},
                                    {' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                                    {' ', ' ', ' ', '#', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '}
                                };
        L.paintBucket(inputPicture, 6, 6);
        char[][] outputPicture = {
                                    {' ', ' ', ' ', ' ', ' ', ' ', '#', '#', '#', ' ', ' ', ' ', ' ', ' ', ' '},
                                    {' ', ' ', ' ', ' ', '#', '#', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                                    {' ', ' ', ' ', '#', '#', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                                    {' ', '#', '#', '#', '#', '#', '#', ' ', ' ', ' ', ' ', ' ', '#', '#', '#'},
                                    {'#', '#', '#', '#', '#', '#', '#', '#', ' ', ' ', ' ', '#', ' ', '#', ' '},
                                    {'#', '#', '#', ' ', '#', '#', '#', '#', '#', ' ', '#', ' ', '#', ' ', ' '},
                                    {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', ' ', ' ', ' ', '#', ' '},
                                    {'#', '#', '#', '#', '#', '#', '#', '#', '#', ' ', '#', ' ', '#', ' ', ' '},
                                    {' ', '#', '#', '#', '#', '#', '#', '#', ' ', ' ', ' ', '#', ' ', '#', ' '},
                                    {' ', ' ', '#', '#', '#', '#', '#', ' ', ' ', ' ', ' ', ' ', '#', '#', '#'},
                                    {' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                                    {' ', ' ', ' ', '#', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '}
                                };
        boolean match = true;
        for(i = 0; i < inputPicture.length; i++){
            for(j = 0; j < inputPicture[0].length; j++){
                if(inputPicture[i][j] != outputPicture[i][j]){
                    match = false;
                }
            }
        }
        assertTrue(match);
    }
    @Test public void test09_paintBucket(){
        Lab8 L = new Lab8();
        int i, j;
        char[][] inputPicture = {
                                    {' ', ' ', ' ', ' ', ' ', ' ', '#', '#', '#', ' ', ' ', ' ', ' ', ' ', ' '},
                                    {' ', ' ', ' ', ' ', '#', '#', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                                    {' ', ' ', ' ', '#', '#', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                                    {' ', '#', '#', '#', '#', '#', '#', ' ', ' ', ' ', ' ', ' ', '#', '#', '#'},
                                    {'#', '#', '#', '#', '#', '#', '#', '#', ' ', ' ', ' ', '#', ' ', '#', ' '},
                                    {'#', '#', '#', ' ', '#', '#', '#', '#', '#', ' ', '#', ' ', '#', ' ', ' '},
                                    {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', ' ', ' ', ' ', '#', ' '},
                                    {'#', '#', '#', '#', '#', '#', '#', '#', '#', ' ', '#', ' ', '#', ' ', ' '},
                                    {' ', '#', '#', '#', '#', '#', '#', '#', ' ', ' ', ' ', '#', ' ', '#', ' '},
                                    {' ', ' ', '#', '#', '#', '#', '#', ' ', ' ', ' ', ' ', ' ', '#', '#', '#'},
                                    {' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                                    {' ', ' ', ' ', '#', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '}
                                };
        L.paintBucket(inputPicture, 6, 11);
        L.printPicture(inputPicture);
        char[][] outputPicture = {
                                    {' ', ' ', ' ', ' ', ' ', ' ', '#', '#', '#', ' ', ' ', ' ', ' ', ' ', ' '},
                                    {' ', ' ', ' ', ' ', '#', '#', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                                    {' ', ' ', ' ', '#', '#', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                                    {' ', '#', '#', '#', '#', '#', '#', ' ', ' ', ' ', ' ', ' ', '#', '#', '#'},
                                    {'#', '#', '#', '#', '#', '#', '#', '#', ' ', ' ', ' ', '#', ' ', '#', ' '},
                                    {'#', '#', '#', ' ', '#', '#', '#', '#', '#', ' ', '#', '#', '#', ' ', ' '},
                                    {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', ' '},
                                    {'#', '#', '#', '#', '#', '#', '#', '#', '#', ' ', '#', '#', '#', ' ', ' '},
                                    {' ', '#', '#', '#', '#', '#', '#', '#', ' ', ' ', ' ', '#', ' ', '#', ' '},
                                    {' ', ' ', '#', '#', '#', '#', '#', ' ', ' ', ' ', ' ', ' ', '#', '#', '#'},
                                    {' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
                                    {' ', ' ', ' ', '#', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '}
                                };
        boolean match = true;
        for(i = 0; i < inputPicture.length; i++){
            for(j = 0; j < inputPicture[0].length; j++){
                if(inputPicture[i][j] != outputPicture[i][j]){
                    match = false;
                }
            }
        }
        assertTrue(match);
    }
}
